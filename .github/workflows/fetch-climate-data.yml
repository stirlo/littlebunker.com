name: Fetch Climate Data via APIs

on:
  schedule:
    - cron: '0 */2 * * *'  # Every 2 hours
  workflow_dispatch:

jobs:
  fetch-climate-data:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install requests pyyaml

      - name: Fetch Climate Data from APIs
        run: |
          python << 'EOF'
          import requests
          import yaml
          import os
          from datetime import datetime

          def load_previous_data():
              """Load previous metrics.yml data"""
              try:
                  if os.path.exists('_data/metrics.yml'):
                      with open('_data/metrics.yml', 'r') as f:
                          data = yaml.safe_load(f)
                      print("‚úÖ Loaded previous metrics.yml data")
                      return data
              except Exception as e:
                  print(f"‚ö†Ô∏è Could not load previous data: {e}")

              # Fallback structure matching your existing format
              return {
                  'ch4': {'change': 6.98, 'current': 1935.33},
                  'co2': {'change': 2.5, 'current': 421.5},
                  'last_updated': '2025-05-24 09:18:14',
                  'population': {'growth': 67, 'total': 8.1},
                  'temperature': {'overshoot': 1.2}
              }

          def validate_value(new_val, old_val, min_val, max_val, name):
              """Validate values are reasonable AND changes aren't extreme"""
              if not (min_val <= new_val <= max_val):
                  print(f"‚ö†Ô∏è {name} value {new_val} outside range ({min_val}-{max_val}), keeping {old_val}")
                  return old_val

              if old_val > 0:
                  percent_change = abs((new_val - old_val) / old_val) * 100
                  if percent_change > 20:
                      print(f"‚ö†Ô∏è {name} change too large ({percent_change:.1f}%), keeping {old_val}")
                      return old_val

              print(f"‚úÖ {name} updated: {old_val} ‚Üí {new_val}")
              return new_val

          # Load existing metrics
          metrics = load_previous_data()
          print(f"üîÑ Starting with: CO2 {metrics['co2']['current']} ppm, CH4 {metrics['ch4']['current']} ppb")

          # 1. Fetch CO2 from NOAA
          print("\nüìä Fetching CO2 from NOAA...")
          try:
              response = requests.get(
                  "https://gml.noaa.gov/webdata/ccgg/trends/co2/co2_weekly_mlo.txt",
                  timeout=15
              )
              if response.status_code == 200:
                  lines = [line for line in response.text.strip().split('\n') 
                          if not line.startswith('#') and line.strip()]
                  if lines:
                      latest = lines[-1].split()
                      print(f"üîç NOAA CO2 latest: {latest}")
                      if len(latest) >= 4:
                          try:
                              new_co2 = round(float(latest[4]), 1)  # This gets the actual CO2 value

                              print(f"üîç Parsed CO2: {new_co2} ppm from {latest[0]}-{latest[1]}-{latest[2]}")

                              metrics['co2']['current'] = validate_value(
                                  new_co2, metrics['co2']['current'], 350, 500, "CO2"
                              )

                              # Calculate annual change
                              if len(lines) >= 365:
                                  year_ago = lines[-365].split()
                                  if len(year_ago) >= 4:
                                      year_ago_val = float(year_ago[3])
                                      metrics['co2']['change'] = round(
                                          metrics['co2']['current'] - year_ago_val, 1
                                      )
                                      print(f"üìà CO2 annual change: +{metrics['co2']['change']} ppm/year")
                          except (ValueError, IndexError) as e:
                              print(f"‚ùå Could not parse CO2: {e}")
          except Exception as e:
              print(f"‚ùå NOAA CO2 failed: {e}")

          # 2. Fetch CH4 from NOAA
          print("\nüìä Fetching CH4 from NOAA...")
          try:
              response = requests.get(
                  "https://gml.noaa.gov/webdata/ccgg/trends/ch4/ch4_mm_gl.txt",
                  timeout=15
              )
              if response.status_code == 200:
                  lines = [line for line in response.text.strip().split('\n') 
                          if not line.startswith('#') and line.strip()]
                  if lines:
                      latest = lines[-1].split()
                      print(f"üîç CH4 latest: {latest}")
                      if len(latest) >= 4:
                          try:
                              new_ch4 = round(float(latest[3]), 2)  # Match your format (1935.33)
                              print(f"üîç Parsed CH4: {new_ch4} ppb from {latest[0]}-{latest[1]}")

                              metrics['ch4']['current'] = validate_value(
                                  new_ch4, metrics['ch4']['current'], 1800, 2100, "CH4"
                              )

                              # Calculate annual change
                              if len(lines) >= 12:
                                  year_ago = lines[-12].split()
                                  if len(year_ago) >= 4:
                                      year_ago_val = float(year_ago[3])
                                      metrics['ch4']['change'] = round(
                                          metrics['ch4']['current'] - year_ago_val, 2
                                      )
                                      print(f"üìà CH4 annual change: +{metrics['ch4']['change']} ppb/year")
                          except (ValueError, IndexError) as e:
                              print(f"‚ùå Could not parse CH4: {e}")
          except Exception as e:
              print(f"‚ùå NOAA CH4 failed: {e}")

          # 3. Temperature from Climate Reanalyzer (Daily Updates)
          print("\nüå°Ô∏è Fetching daily temperature data...")
          try:
              response = requests.get(
                  "https://climatereanalyzer.org/clim/t2_daily/json/cfsr_world_t2_day.json",
                  timeout=15
              )
              if response.status_code == 200:
                  data = response.json()

                  # Get latest daily anomaly
                  latest_day = data[-1]
                  current_anomaly = latest_day['value']

                  # Adjust from 1979-2000 baseline to 1850-1900 baseline (+0.9¬∞C)
                  adjusted_current = round(current_anomaly + 0.9, 2)

                  # Find recent peak (last 365 days)
                  recent_data = data[-365:]
                  peak_value = max(d['value'] for d in recent_data)
                  adjusted_peak = round(peak_value + 0.9, 2)

                  print(f"üìÖ Current temperature anomaly: +{adjusted_current}¬∞C")
                  print(f"üî• Recent peak (365 days): +{adjusted_peak}¬∞C")

                  # Update metrics structure - NEW FORMAT
                  metrics['temperature'] = {
                      'current': adjusted_current,
                      'recent_peak': adjusted_peak
                  }

                  # Validate values
                  metrics['temperature']['current'] = validate_value(
                      adjusted_current, 1.2, -2.0, 3.0, "Current Temperature"
                  )
                  metrics['temperature']['recent_peak'] = validate_value(
                      adjusted_peak, 1.5, -2.0, 3.0, "Peak Temperature"
                  )

          except Exception as e:
              print(f"‚ùå Daily temperature failed: {e}")
              # Keep existing structure if fetch fails
              if 'temperature' not in metrics or 'overshoot' in metrics['temperature']:
                  metrics['temperature'] = {
                      'current': metrics.get('temperature', {}).get('overshoot', 1.2),
                      'recent_peak': 1.5
                  }

          # 4. Population from World Bank API
          print("\nüë• Fetching population data...")
          population_updated = False
          for year in [2024, 2023, 2022]:
              try:
                  response = requests.get(
                      f"https://api.worldbank.org/v2/country/WLD/indicator/SP.POP.TOTL?format=json&date={year}",
                      timeout=15
                  )
                  if response.status_code == 200:
                      data = response.json()
                      if len(data) > 1 and data[1]:
                          pop_data = data[1][0]
                          if 'value' in pop_data and pop_data['value']:
                              new_pop = round(pop_data['value'] / 1000000000, 1)  # Match format (8.1)
                              print(f"üîç World Bank population for {year}: {new_pop}B")
                              metrics['population']['total'] = validate_value(
                                  new_pop, metrics['population']['total'], 7.0, 10.0, "Population"
                              )
                              population_updated = True
                              break
              except Exception as e:
                  print(f"‚ùå World Bank API failed for {year}: {e}")

          # 5. Backup: Worldometers for population
          if not population_updated:
              print("\nüë• Backup: Worldometers...")
              try:
                  response = requests.get("https://worldometers.info/world-population/", timeout=15)
                  if response.status_code == 200:
                      import re
                      pop_match = re.search(r'rts-counter[^>]*>([0-9,]+)', response.text)
                      if pop_match:
                          pop_str = pop_match.group(1).replace(',', '')
                          new_pop = round(float(pop_str) / 1000000000, 1)
                          print(f"üîç Worldometers population: {new_pop}B")
                          metrics['population']['total'] = validate_value(
                              new_pop, metrics['population']['total'], 7.0, 10.0, "Population"
                          )

                      # Growth rate
                      growth_match = re.search(r'([0-9,]+)\s*people.*year', response.text)
                      if growth_match:
                          growth_str = growth_match.group(1).replace(',', '')
                          new_growth = round(float(growth_str) / 1000000, 0)
                          metrics['population']['growth'] = int(new_growth)  # Match format (67)
                          print(f"üìà Population growth: +{metrics['population']['growth']}M/year")
              except Exception as e:
                  print(f"‚ùå Worldometers failed: {e}")

          # Update timestamp
          metrics['last_updated'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

          # Save to metrics.yml
          os.makedirs('_data', exist_ok=True)
          with open('_data/metrics.yml', 'w') as f:
              yaml.dump(metrics, f, default_flow_style=False, sort_keys=True)

          print(f"\n‚úÖ Updated _data/metrics.yml")
          print(f"üìä Final metrics:")
          print(f"   CO2: {metrics['co2']['current']} ppm (+{metrics['co2']['change']}/year)")
          print(f"   CH4: {metrics['ch4']['current']} ppb (+{metrics['ch4']['change']}/year)")
          print(f"   Temperature: Current +{metrics['temperature']['current']}¬∞C, Peak +{metrics['temperature']['recent_peak']}¬∞C")
          print(f"   Population: {metrics['population']['total']}B (+{metrics['population']['growth']}M/year)")
          print(f"   Updated: {metrics['last_updated']}")
          EOF

      - name: Commit updated metrics
        run: |
          git config --global user.name 'Climate Data Bot'
          git config --global user.email 'action@github.com'
          git add _data/metrics.yml
          git diff --quiet && git diff --staged --quiet || (git commit -m "üìä Update climate metrics - $(date)" && git push)
