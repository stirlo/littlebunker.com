name: Fetch Climate Data via APIs

on:
  schedule:
    - cron: '0 */2 * * *'  # Every 2 hours
  workflow_dispatch:

jobs:
  fetch-climate-data:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install requests pyyaml

      - name: Fetch Climate Data from APIs
        run: |
          python << 'EOF'
          import requests
          import json
          import os
          from datetime import datetime
          import time

          os.makedirs('_data', exist_ok=True)

          def load_previous_data():
              """Load previous data or use emergency fallbacks"""
              try:
                  if os.path.exists('_data/climate_data.json'):
                      with open('_data/climate_data.json', 'r') as f:
                          data = json.load(f)
                      print("‚úÖ Loaded previous data as baseline")
                      return data.get('current_values', {})
              except Exception as e:
                  print(f"‚ö†Ô∏è Could not load previous data: {e}")

              return {
                  'co2_current': 421.85,
                  'co2_change': 2.4,
                  'ch4_current': 1912.0,
                  'ch4_change': 8.2,
                  'temp_anomaly': 1.15,
                  'population': 8.12,
                  'pop_growth': 67
              }

          def validate_value(new_val, old_val, min_val, max_val, name):
              """Validate values are reasonable AND changes aren't extreme"""
              # First check: Is the new value in a reasonable range?
              if not (min_val <= new_val <= max_val):
                  print(f"‚ö†Ô∏è {name} value {new_val} outside reasonable range ({min_val}-{max_val}), keeping {old_val}")
                  return old_val

              # Second check: Is the change reasonable? (max 20% change)
              if old_val > 0:
                  percent_change = abs((new_val - old_val) / old_val) * 100
                  if percent_change > 20:
                      print(f"‚ö†Ô∏è {name} change too large ({percent_change:.1f}% change: {new_val} vs {old_val}), keeping {old_val}")
                      return old_val

              print(f"‚úÖ {name} updated: {old_val} ‚Üí {new_val}")
              return new_val

          # Load baseline data
          current_values = load_previous_data()
          print(f"üîÑ Starting with: CO2 {current_values.get('co2_current', 'N/A')} ppm")

          # 1. Try NOAA direct API with CORRECT parsing
          print("\nüìä Fetching CO2 from NOAA direct...")
          try:
              response = requests.get(
                  "https://gml.noaa.gov/webdata/ccgg/trends/co2/co2_trend_gl.txt",
                  timeout=15
              )
              if response.status_code == 200:
                  lines = [line for line in response.text.strip().split('\n') 
                          if not line.startswith('#') and line.strip()]
                  if lines:
                      latest = lines[-1].split()
                      print(f"üîç NOAA latest line: {latest}")
                      # Format: [YYYY, M, DD, CO2_current, CO2_smoothed]
                      if len(latest) >= 4:
                          try:
                              new_co2 = round(float(latest[3]), 2)  # Index 3 = CO2 value
                              print(f"üîç Parsed CO2: {new_co2} ppm from {latest[0]}-{latest[1]}-{latest[2]}")
                              # Validate: CO2 should be 350-500 ppm range
                              current_values['co2_current'] = validate_value(
                                  new_co2, current_values.get('co2_current', 421), 350, 500, "CO2"
                              )

                              # Calculate annual change if we have enough data
                              if len(lines) >= 365:  # Try full year of daily data
                                  year_ago = lines[-365].split()
                                  if len(year_ago) >= 4:
                                      year_ago_val = float(year_ago[3])  # Also index 3
                                      current_values['co2_change'] = round(
                                          current_values['co2_current'] - year_ago_val, 2
                                      )
                                      print(f"üìà CO2 annual change: +{current_values['co2_change']} ppm/year")
                          except (ValueError, IndexError) as e:
                              print(f"‚ùå Could not parse CO2 value: {e}")
          except Exception as e:
              print(f"‚ùå NOAA CO2 failed: {e}")

          # 2. Try NOAA for CH4 data with correct parsing
          print("\nüìä Fetching CH4 from NOAA...")
          try:
              response = requests.get(
                  "https://gml.noaa.gov/webdata/ccgg/trends/ch4/ch4_mm_gl.txt",
                  timeout=15
              )
              if response.status_code == 200:
                  lines = [line for line in response.text.strip().split('\n') 
                          if not line.startswith('#') and line.strip()]
                  if lines:
                      latest = lines[-1].split()
                      print(f"üîç CH4 latest line: {latest}")
                      # CH4 format might be different - let's check what we get
                      if len(latest) >= 4:
                          try:
                              # Try different indices to find the CH4 value
                              for i, val in enumerate(latest):
                                  try:
                                      test_val = float(val)
                                      if 1500 <= test_val <= 2500:  # Reasonable CH4 range
                                          new_ch4 = round(test_val, 1)
                                          print(f"üîç Found CH4 at index {i}: {new_ch4} ppb")
                                          current_values['ch4_current'] = validate_value(
                                              new_ch4, current_values.get('ch4_current', 1912), 1500, 2500, "CH4"
                                          )
                                          break
                                  except ValueError:
                                      continue
                          except Exception as e:
                              print(f"‚ùå Could not parse CH4 value: {e}")
          except Exception as e:
              print(f"‚ùå NOAA CH4 failed: {e}")

          # 3. Temperature from NASA GISS
          print("\nüå°Ô∏è Fetching temperature data...")
          try:
              response = requests.get(
                  "https://data.giss.nasa.gov/gistemp/tabledata_v4/GLB.Ts+dSST.txt",
                  timeout=15
              )
              if response.status_code == 200:
                  lines = response.text.strip().split('\n')
                  for line in reversed(lines):
                      if line.strip() and not line.startswith('#'):
                          parts = line.split()
                          if len(parts) >= 14 and parts[0].isdigit():
                              year = int(parts[0])
                              if year >= 2020 and parts[13] != '*':
                                  try:
                                      new_temp = round(float(parts[13]) / 100.0, 2)
                                      # Validate: Temperature anomaly should be -2 to +3¬∞C
                                      current_values['temp_anomaly'] = validate_value(
                                          new_temp, current_values.get('temp_anomaly', 1.15), -2.0, 3.0, "Temperature"
                                      )
                                      print(f"üìÖ Temperature data from year {year}")
                                      break
                                  except (ValueError, IndexError) as e:
                                      print(f"‚ùå Could not parse temperature: {e}")
          except Exception as e:
              print(f"‚ùå NASA GISS failed: {e}")

          # 4. Population from World Bank API (try multiple years)
          print("\nüë• Fetching population data from World Bank API...")
          population_updated = False
          for year in [2024, 2023, 2022]:  # Try recent years
              try:
                  response = requests.get(
                      f"https://api.worldbank.org/v2/country/WLD/indicator/SP.POP.TOTL?format=json&date={year}",
                      timeout=15
                  )
                  if response.status_code == 200:
                      data = response.json()
                      if len(data) > 1 and data[1]:
                          pop_data = data[1][0]
                          if 'value' in pop_data and pop_data['value']:
                              new_pop = round(pop_data['value'] / 1000000000, 2)
                              print(f"üîç World Bank population for {year}: {new_pop}B")
                              # Validate: Population should be 7-10 billion
                              current_values['population'] = validate_value(
                                  new_pop, current_values.get('population', 8.12), 7.0, 10.0, "Population"
                              )
                              population_updated = True
                              break
              except Exception as e:
                  print(f"‚ùå World Bank API failed for {year}: {e}")

          # 5. Backup: Worldometers for population (if World Bank failed)
          if not population_updated:
              print("\nüë• Backup: Fetching population from Worldometers...")
              try:
                  response = requests.get("https://worldometers.info/world-population/", timeout=15)
                  if response.status_code == 200:
                      import re
                      # Look for the live counter
                      pop_match = re.search(r'rts-counter[^>]*>([0-9,]+)', response.text)
                      if pop_match:
                          pop_str = pop_match.group(1).replace(',', '')
                          new_pop = round(float(pop_str) / 1000000000, 2)
                          print(f"üîç Worldometers live population: {new_pop}B")
                          current_values['population'] = validate_value(
                              new_pop, current_values.get('population', 8.12), 7.0, 10.0, "Population"
                          )

                      # Try to get growth rate too
                      growth_match = re.search(r'([0-9,]+)\s*people.*year', response.text)
                      if growth_match:
                          growth_str = growth_match.group(1).replace(',', '')
                          new_growth = round(float(growth_str) / 1000000, 0)
                          current_values['pop_growth'] = new_growth
                          print(f"üìà Population growth: +{new_growth}M/year")
              except Exception as e:
                  print(f"‚ùå Worldometers failed: {e}")

          # Create comprehensive data structure
          climate_data = {
              'last_updated': datetime.now().strftime("%Y-%m-%d %H:%M:%S UTC"),
              'update_frequency': 'Every 2 hours',
              'data_sources': {
                  'co2': 'NOAA Global Monitoring Laboratory',
                  'ch4': 'NOAA Global Monitoring Laboratory',
                  'temperature': 'NASA GISS',
                  'population': 'World Bank API / Worldometers'
              },
              'current_values': current_values,
              'validation_ranges': {
                  'co2': '350-500 ppm',
                  'ch4': '1500-2500 ppb', 
                  'temperature': '-2 to +3¬∞C anomaly',
                  'population': '7-10 billion'
              },
              'status': {
                  'co2_updated': current_values.get('co2_current') is not None,
                  'ch4_updated': current_values.get('ch4_current') is not None,
                  'temperature_updated': current_values.get('temp_anomaly') is not None,
                  'population_updated': current_values.get('population') is not None
              }
          }

          # Save to JSON
          with open('_data/climate_data.json', 'w') as f:
              json.dump(climate_data, f, indent=2)

          print(f"\n‚úÖ Climate data saved to _data/climate_data.json")
          print(f"üìä Final values:")
          print(f"   CO2: {current_values.get('co2_current', 'N/A')} ppm (+{current_values.get('co2_change', 'N/A')}/year)")
          print(f"   CH4: {current_values.get('ch4_current', 'N/A')} ppb")
          print(f"   Temperature: +{current_values.get('temp_anomaly', 'N/A')}¬∞C")
          print(f"   Population: {current_values.get('population', 'N/A')}B (+{current_values.get('pop_growth', 'N/A')}M/year)")
          EOF

      - name: Commit climate data
        run: |
          git config --global user.name 'Climate Data Bot'
          git config --global user.email 'action@github.com'
          git add _data/climate_data.json
          git diff --quiet && git diff --staged --quiet || (git commit -m "üìä Update climate data - $(date)" && git push)
