name: Post to Bluesky

on:
  workflow_run:
    workflows: ["Update RSS Feeds"]
    types:
      - completed
  schedule:
    - cron: '30 */8 * * *'
  workflow_dispatch:

jobs:
  post-to-bluesky:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install feedparser requests pyyaml atproto

      - name: Prepare content and post to Bluesky
        id: prepare-content
        env:
          BLUESKY_HANDLE: ${{ secrets.BLUESKY_HANDLE }}
          BLUESKY_PASSWORD: ${{ secrets.BLUESKY_PASSWORD }}
        run: |
          python << 'EOF'
          import feedparser
          import os
          import json
          import yaml
          import hashlib
          import re
          from datetime import datetime
          from atproto import Client

          FEED_URL = "https://littlebunker.com/feed.xml"
          POSTED_FILE = "_data/posted_to_bluesky.json"

          def load_posted_entries():
              try:
                  if os.path.exists(POSTED_FILE):
                      with open(POSTED_FILE, 'r') as f:
                          return json.load(f)
                  else:
                      os.makedirs(os.path.dirname(POSTED_FILE), exist_ok=True)
                      return {"posted_entries": [], "last_climate_post": 0}
              except Exception as e:
                  print(f"Error loading posted entries: {e}")
                  return {"posted_entries": [], "last_climate_post": 0}

          def load_climate_metrics():
              try:
                  if os.path.exists('_data/metrics.yml'):
                      with open('_data/metrics.yml', 'r') as f:
                          return yaml.safe_load(f)
                  return None
              except Exception as e:
                  print(f"Error loading climate metrics: {e}")
                  return None

          def create_climate_post(metrics, post_type):
              if not metrics:
                  return None

              if post_type == 0:  # CO2 post
                  co2 = metrics.get('co2', {})
                  current = co2.get('current', 'N/A')
                  change = co2.get('change', 'N/A')
                  return f"üåç CO2: {current} ppm (+{change}/year)\n\nCurrent atmospheric carbon dioxide levels continue rising"

              elif post_type == 1:  # CH4 post
                  ch4 = metrics.get('ch4', {})
                  current = ch4.get('current', 'N/A')
                  change = ch4.get('change', 'N/A')
                  return f"üî• CH4: {current} ppb (+{change}/year)\n\nMethane concentration accelerating climate change"

              elif post_type == 2:  # Temperature post
                  temp = metrics.get('temperature', {})
                  overshoot = temp.get('overshoot', 'N/A')
                  return f"üå°Ô∏è Temperature: +{overshoot}¬∞C overshoot\n\nGlobal warming exceeding safe limits"

              return None

          def post_to_bluesky(content):
              """Post content directly to Bluesky with clickable links"""
              try:
                  client = Client()
                  client.login(os.environ['BLUESKY_HANDLE'], os.environ['BLUESKY_PASSWORD'])
          
                  # Find URLs in the content
                  import re
                  url_pattern = r'https?://[^\s]+'
                  urls = list(re.finditer(url_pattern, content))
          
                  # Create facets for URLs
                  facets = []
                  for match in urls:
                      facets.append({
                          "index": {
                              "byteStart": len(content[:match.start()].encode('utf-8')),
                              "byteEnd": len(content[:match.end()].encode('utf-8'))
                          },
                          "features": [{
                              "$type": "app.bsky.richtext.facet#link",
                              "uri": match.group()
                          }]
                      })
          
                  # Post with facets if URLs found
                  if facets:
                      response = client.send_post(
                          text=content,
                          facets=facets
                      )
                  else:
                      response = client.send_post(text=content)
          
                  print(f"‚úÖ Successfully posted to Bluesky!")
                  print(f"Content: {content[:100]}...")
                  return True
              except Exception as e:
                  print(f"‚ùå Failed to post to Bluesky: {e}")
                  return False


          def main():
              posted_data = load_posted_entries()
              posted_entries = posted_data["posted_entries"]
              last_climate_post = posted_data.get("last_climate_post", 0)

              # Determine if this should be a climate post (every 4th post)
              total_posts = len(posted_entries)
              should_post_climate = (total_posts % 4 == 0)

              content_to_post = None
              entry_id = None
              posted_successfully = False

              if should_post_climate:
                  # Prepare climate metrics post
                  print("üåç Preparing climate data post...")
                  metrics = load_climate_metrics()
                  climate_post_type = last_climate_post % 3

                  content_to_post = create_climate_post(metrics, climate_post_type)
                  entry_id = f"climate_{climate_post_type}_{datetime.now().isoformat()}"

                  if content_to_post:
                      posted_successfully = post_to_bluesky(content_to_post)
                      if posted_successfully:
                          # Update climate post counter
                          posted_data["last_climate_post"] = climate_post_type + 1
                          print(f"üìä Climate post type {climate_post_type} completed")
              else:
                  # Prepare RSS content post
                  print("üì∞ Preparing RSS content post...")
                  feed = feedparser.parse(FEED_URL)
                  if feed.entries:
                      for entry in feed.entries[:5]:  # Check more entries
                          entry_id = hashlib.md5(entry.get('link', '').encode()).hexdigest()

                          if entry_id in posted_entries:
                              print(f"‚è≠Ô∏è Skipping already posted: {entry.get('title', '')[:50]}...")
                              continue

                          title = entry.get('title', '').strip()
                          link = entry.get('link', '')

                          # Smart content formatting
                          if link:
                              content_to_post = f"{title}\n\n{link}"
                          else:
                              content_to_post = title

                          # Handle length limits intelligently
                          if len(content_to_post) > 290:
                              if link:
                                  max_title_length = 280 - len(f"\n\n{link}")
                                  truncated_title = title[:max_title_length-3] + "..." if len(title) > max_title_length else title
                                  content_to_post = f"{truncated_title}\n\n{link}"
                              else:
                                  content_to_post = title[:287] + "..."

                          # Attempt to post
                          posted_successfully = post_to_bluesky(content_to_post)
                          if posted_successfully:
                              print(f"üìù Posted RSS content: {title[:50]}...")
                              break
                          else:
                              print(f"‚ùå Failed to post, trying next entry...")
                              continue

              # Update tracking data if post was successful
              if posted_successfully and entry_id:
                  posted_data["posted_entries"].append(entry_id)
                  posted_data["posted_entries"] = posted_data["posted_entries"][-50:]  # Keep last 50

                  with open(POSTED_FILE, 'w') as f:
                      json.dump(posted_data, f, indent=2)

                  print(f"üíæ Updated tracking data. Total posts: {len(posted_data['posted_entries'])}")

                  # Set output for commit step
                  with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                      f.write(f"posted=true\n")
              else:
                  print("‚ùå No content posted")
                  with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                      f.write(f"posted=false\n")

          if __name__ == "__main__":
              main()
          EOF

      - name: Commit changes if any
        if: steps.prepare-content.outputs.posted == 'true'
        run: |
          git config --global user.name 'Bluesky Bot'
          git config --global user.email 'action@github.com'
          git add -A
          git diff --quiet && git diff --staged --quiet || (git commit -m "Update Bluesky posting tracking" && git push)
