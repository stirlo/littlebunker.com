name: Post to Bluesky

on:
  workflow_run:
    workflows: ["Update RSS Feeds"]
    types:
      - completed
  schedule:
    - cron: '30 * * * *'
  workflow_dispatch:

jobs:
  post-to-bluesky:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install atproto feedparser requests

      - name: Post to Bluesky
        env:
          BLUESKY_HANDLE: ${{ secrets.BLUESKY_HANDLE }}
          BLUESKY_PASSWORD: ${{ secrets.BLUESKY_PASSWORD }}
        run: |
          python - << 'EOF'
          import feedparser
          import os
          import time
          import json
          import hashlib
          from datetime import datetime, timezone
          from atproto import Client

          # Bluesky credentials
          BLUESKY_HANDLE = os.environ.get('BLUESKY_HANDLE')
          BLUESKY_PASSWORD = os.environ.get('BLUESKY_PASSWORD')

          # Feed URL
          FEED_URL = "https://littlebunker.com/feed.xml"

          # File to store posted entries
          POSTED_FILE = "_data/posted_to_bluesky.json"

          def load_posted_entries():
              try:
                  if os.path.exists(POSTED_FILE):
                      with open(POSTED_FILE, 'r') as f:
                          return json.load(f)
                  else:
                      # Create directory if it doesn't exist
                      os.makedirs(os.path.dirname(POSTED_FILE), exist_ok=True)
                      return {"posted_entries": []}
              except Exception as e:
                  print(f"Error loading posted entries: {e}")
                  return {"posted_entries": []}

          def save_posted_entry(entry_id):
              try:
                  posted_data = load_posted_entries()
                  posted_data["posted_entries"].append(entry_id)
                  # Keep only the last 50 entries to avoid the file growing too large
                  posted_data["posted_entries"] = posted_data["posted_entries"][-50:]

                  with open(POSTED_FILE, 'w') as f:
                      json.dump(posted_data, f, indent=2)
              except Exception as e:
                  print(f"Error saving posted entry: {e}")

          def post_to_bluesky(title, link, description):
              try:
                  # Create Bluesky client
                  client = Client()
                  client.login(BLUESKY_HANDLE, BLUESKY_PASSWORD)

                  # Create post content
                  content = f"{title}\n\n{description[:100]}...\n\n{link}"

                  # Post to Bluesky
                  response = client.send_post(content)
                  print(f"Posted to Bluesky: {title}")
                  return True
              except Exception as e:
                  print(f"Error posting to Bluesky: {e}")
                  return False

          def main():
              # Parse feed
              feed = feedparser.parse(FEED_URL)

              if not feed.entries:
                  print("No entries found in feed")
                  return

              # Load previously posted entries
              posted_data = load_posted_entries()
              posted_entries = posted_data["posted_entries"]

              # Get latest entry
              for entry in feed.entries[:3]:  # Check the 3 most recent entries
                  # Create a unique ID for this entry
                  title = entry.get('title', '')
                  link = entry.get('link', '')
                  entry_id = hashlib.md5(f"{title}|{link}".encode()).hexdigest()

                  # Check if we've already posted this
                  if entry_id in posted_entries:
                      print(f"Already posted: {title}")
                      continue

                  # Extract info
                  description = entry.get('description', '').replace('<p>', '').replace('</p>', '')

                  # Post to Bluesky
                  success = post_to_bluesky(title, link, description)

                  if success:
                      # Save this entry as posted
                      save_posted_entry(entry_id)
                      # Only post one entry per run
                      break

              else:
                  print("No new entries to post")

          if __name__ == "__main__":
              main()
          EOF

      - name: Commit changes if any
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          git add -A
          git diff --quiet && git diff --staged --quiet || (git commit -m "Update posted entries tracking" && git push)
