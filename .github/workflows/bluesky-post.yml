name: Post to Bluesky

on:
  workflow_run:
    workflows: ["Update RSS Feeds"]
    types:
      - completed
  schedule:
    - cron: '30 */8 * * *'  # Every 8 hours for climate posts
  workflow_dispatch:

jobs:
  post-to-bluesky:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install feedparser requests pyyaml

      - name: Prepare content for posting
        id: prepare-content
        env:
          BLUESKY_HANDLE: ${{ secrets.BLUESKY_HANDLE }}
          BLUESKY_PASSWORD: ${{ secrets.BLUESKY_PASSWORD }}
        run: |
          python << 'EOF'
          import feedparser
          import os
          import json
          import yaml
          import hashlib
          from datetime import datetime

          FEED_URL = "https://littlebunker.com/feed.xml"
          POSTED_FILE = "_data/posted_to_bluesky.json"

          def load_posted_entries():
              try:
                  if os.path.exists(POSTED_FILE):
                      with open(POSTED_FILE, 'r') as f:
                          return json.load(f)
                  else:
                      os.makedirs(os.path.dirname(POSTED_FILE), exist_ok=True)
                      return {"posted_entries": [], "last_climate_post": 0}
              except Exception as e:
                  print(f"Error loading posted entries: {e}")
                  return {"posted_entries": [], "last_climate_post": 0}

          def load_climate_metrics():
              try:
                  if os.path.exists('_data/metrics.yml'):
                      with open('_data/metrics.yml', 'r') as f:
                          return yaml.safe_load(f)
                  return None
              except Exception as e:
                  print(f"Error loading climate metrics: {e}")
                  return None

          def create_climate_post(metrics, post_type):
              if not metrics:
                  return None

              if post_type == 0:  # CO2 post
                  co2 = metrics.get('co2', {})
                  current = co2.get('current', 'N/A')
                  change = co2.get('change', 'N/A')
                  return f"CO2: {current} ppm (+{change}/year)\n\nCurrent atmospheric carbon dioxide levels"

              elif post_type == 1:  # CH4 post
                  ch4 = metrics.get('ch4', {})
                  current = ch4.get('current', 'N/A')
                  change = ch4.get('change', 'N/A')
                  return f"CH4: {current} ppb (+{change}/year)\n\nMethane concentration rising"

              elif post_type == 2:  # Temperature post
                  temp = metrics.get('temperature', {})
                  overshoot = temp.get('overshoot', 'N/A')
                  return f"Temperature: +{overshoot}°C overshoot\n\nGlobal warming above baseline"

              return None

          def main():
              posted_data = load_posted_entries()
              posted_entries = posted_data["posted_entries"]
              last_climate_post = posted_data.get("last_climate_post", 0)

              # Determine if this should be a climate post (every 4th post)
              total_posts = len(posted_entries)
              should_post_climate = (total_posts % 4 == 0)

              content_to_post = None
              entry_id = None

              if should_post_climate:
                  # Prepare climate metrics post
                  metrics = load_climate_metrics()
                  climate_post_type = last_climate_post % 3

                  content_to_post = create_climate_post(metrics, climate_post_type)
                  entry_id = f"climate_{climate_post_type}_{datetime.now().isoformat()}"

                  # Update climate post counter
                  posted_data["last_climate_post"] = climate_post_type + 1
              else:
                  # Prepare RSS content post
                  feed = feedparser.parse(FEED_URL)
                  if feed.entries:
                      for entry in feed.entries[:3]:
                          entry_id = hashlib.md5(entry.get('link', '').encode()).hexdigest()

                          if entry_id in posted_entries:
                              continue

                          title = entry.get('title', '').strip()
                          link = entry.get('link', '')

                          content_to_post = f"{title}\n\n{link}"

                          if len(content_to_post) > 290:
                              max_title_length = 280 - len(f"\n\n{link}")
                              truncated_title = title[:max_title_length-3] + "..." if len(title) > max_title_length else title
                              content_to_post = f"{truncated_title}\n\n{link}"
                          break

              # Output for GitHub Actions using new environment file method
              if content_to_post and entry_id:
                  # Save content to file for the action to read
                  with open('post_content.txt', 'w') as f:
                      f.write(content_to_post)

                  # Update posted entries
                  posted_data["posted_entries"].append(entry_id)
                  posted_data["posted_entries"] = posted_data["posted_entries"][-50:]

                  with open(POSTED_FILE, 'w') as f:
                      json.dump(posted_data, f, indent=2)

                  # Use new GitHub Actions output method
                  with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                      f.write(f"should_post=true\n")
                      f.write(f"content={content_to_post}\n")
              else:
                  with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                      f.write(f"should_post=false\n")

          if __name__ == "__main__":
              main()
          EOF

      - name: Post to Bluesky via direct API
        if: steps.prepare-content.outputs.should_post == 'true'
        env:
          BLUESKY_HANDLE: ${{ secrets.BLUESKY_HANDLE }}
          BLUESKY_PASSWORD: ${{ secrets.BLUESKY_PASSWORD }}
        run: |
          pip install atproto
          python << 'EOF'
          import os
          from atproto import Client

          # Read the prepared content from your sophisticated system
          with open('post_content.txt', 'r') as f:
              content = f.read().strip()

          # Post to Bluesky
          try:
              client = Client()
              client.login(os.environ['BLUESKY_HANDLE'], os.environ['BLUESKY_PASSWORD'])
              response = client.send_post(text=content)
              print(f"✅ Successfully posted to Bluesky!")
              print(f"Content: {content[:100]}...")
          except Exception as e:
              print(f"❌ Failed to post to Bluesky: {e}")
              exit(1)
          EOF

      - name: Commit changes if any
        run: |
          git config --global user.name 'Bluesky Bot'
          git config --global user.email 'action@github.com'
          git add -A
          git diff --quiet && git diff --staged --quiet || (git commit -m "Update Bluesky posting tracking" && git push)
